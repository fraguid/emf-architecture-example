import it.rcpvision.emf.architecture.example.model.carsharing.User
import it.rcpvision.emf.architecture.example.ui.custom.ArrayTableViewerContentProvider
import it.rcpvision.emf.architecture.example.ui.custom.DirtyRowsTableLabelProvider
import it.rcpvision.emf.architecture.example.ui.custom.ListUndoableEditingStrategy
import it.rcpvision.emf.architecture.example.ui.presenter.IUserPresenter
import it.rcpvision.emf.architecture.example.ui.presenter.impl.UserPresenterImpl
import it.rcpvision.emf.architecture.example.ui.view.UserTableFormView
import org.eclipse.emf.parsley.edit.IEditingStrategy
import org.eclipse.emf.parsley.edit.ui.provider.TableViewerContentProvider
import org.eclipse.emf.parsley.ui.provider.TableColumnLabelProvider
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain
import org.eclipse.emf.parsley.edit.domain.GlobalAdapterFactoryEditingDomainProvider

module it.rcpvision.emf.architecture.example.ui.user {
	 
	parts{
		viewpart it.rcpvision.emf.architecture.example.ui.view.user {
			viewname "User View"
			viewclass UserTableFormView
		}
	}
	
	labelProvider{
		text{
			User -> name +" "+surname
		}
		image{
			User -> "person.png"
		}
	}
	
	bindings{
		type IUserPresenter -> UserPresenterImpl
		type IEditingStrategy -> ListUndoableEditingStrategy
		type TableColumnLabelProvider -> DirtyRowsTableLabelProvider
		type TableViewerContentProvider -> ArrayTableViewerContentProvider
		provide AdapterFactoryEditingDomain -> GlobalAdapterFactoryEditingDomainProvider
	}
	
	featuresProvider{
		features{
			User -> name, surname
		}
	}
	
	tableFeaturesProvider{
		features{
			User -> id, name, surname
		}
	}
	
}
